//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Samples/XR Interaction Toolkit/3.0.8/visionOS/Input/XRIPolySpatialInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Samples/XR Interaction Toolkit/3.0.8/visionOS/Input/XRIPolySpatialInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @SpatialPointerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @SpatialPointerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRIPolySpatialInputActions"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""2dbea638-e09d-420b-a7ef-e4343b622ecb"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8e5af3df-c5f8-4a1e-b7d2-cf8465df9849"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchPhase"",
                    ""type"": ""Value"",
                    ""id"": ""8266884d-aa39-4b83-9830-3a4973efe355"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""24123604-9580-4671-9bb7-5d0ec0c949f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchPhase"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a778d40f-2ad1-4fe5-8cfb-091ada00625b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74c3f666-c665-47f5-b043-4050eb5ec865"",
                    ""path"": ""<SpatialPointerDevice>/spatialPointer0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46e2aa62-d6a8-4c60-85ec-aab4c1b87c94"",
                    ""path"": ""<SpatialPointerDevice>/spatialPointer0/phase"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPhase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e375c3e-07f5-416e-8b94-58215655bbbc"",
                    ""path"": ""<SpatialPointerDevice>/spatialPointer1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e11b458-5c32-40de-9271-e22e7b43d67b"",
                    ""path"": ""<SpatialPointerDevice>/spatialPointer1/phase"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPhase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRHMD"",
            ""id"": ""e3f3d8dc-6dc0-4d1e-8f2e-82d31170ffa0"",
            ""actions"": [
                {
                    ""name"": ""DevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70607691-0df9-44ae-8259-710c37de4a43"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeviceRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2d13d7ad-83e7-420a-aa3d-12f49acaa812"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d6427d7-8ec4-4722-af22-80204f05c36f"",
                    ""path"": ""<PolySpatialXRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e830475f-8161-40b2-90ab-1dc682b02018"",
                    ""path"": ""<PolySpatialXRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeviceRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_PrimaryTouch = m_Touch.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_Touch_PrimaryTouchPhase = m_Touch.FindAction("PrimaryTouchPhase", throwIfNotFound: true);
        m_Touch_SecondaryTouch = m_Touch.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_Touch_SecondaryTouchPhase = m_Touch.FindAction("SecondaryTouchPhase", throwIfNotFound: true);
        // XRHMD
        m_XRHMD = asset.FindActionMap("XRHMD", throwIfNotFound: true);
        m_XRHMD_DevicePosition = m_XRHMD.FindAction("DevicePosition", throwIfNotFound: true);
        m_XRHMD_DeviceRotation = m_XRHMD.FindAction("DeviceRotation", throwIfNotFound: true);
    }

    ~@SpatialPointerInput()
    {
        UnityEngine.Debug.Assert(!m_Touch.enabled, "This will cause a leak and performance issues, SpatialPointerInput.Touch.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRHMD.enabled, "This will cause a leak and performance issues, SpatialPointerInput.XRHMD.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_PrimaryTouch;
    private readonly InputAction m_Touch_PrimaryTouchPhase;
    private readonly InputAction m_Touch_SecondaryTouch;
    private readonly InputAction m_Touch_SecondaryTouchPhase;
    /// <summary>
    /// Provides access to input actions defined in input action map "Touch".
    /// </summary>
    public struct TouchActions
    {
        private @SpatialPointerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TouchActions(@SpatialPointerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Touch/PrimaryTouch".
        /// </summary>
        public InputAction @PrimaryTouch => m_Wrapper.m_Touch_PrimaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "Touch/PrimaryTouchPhase".
        /// </summary>
        public InputAction @PrimaryTouchPhase => m_Wrapper.m_Touch_PrimaryTouchPhase;
        /// <summary>
        /// Provides access to the underlying input action "Touch/SecondaryTouch".
        /// </summary>
        public InputAction @SecondaryTouch => m_Wrapper.m_Touch_SecondaryTouch;
        /// <summary>
        /// Provides access to the underlying input action "Touch/SecondaryTouchPhase".
        /// </summary>
        public InputAction @SecondaryTouchPhase => m_Wrapper.m_Touch_SecondaryTouchPhase;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TouchActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TouchActions" />
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @PrimaryTouchPhase.started += instance.OnPrimaryTouchPhase;
            @PrimaryTouchPhase.performed += instance.OnPrimaryTouchPhase;
            @PrimaryTouchPhase.canceled += instance.OnPrimaryTouchPhase;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @SecondaryTouchPhase.started += instance.OnSecondaryTouchPhase;
            @SecondaryTouchPhase.performed += instance.OnSecondaryTouchPhase;
            @SecondaryTouchPhase.canceled += instance.OnSecondaryTouchPhase;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TouchActions" />
        private void UnregisterCallbacks(ITouchActions instance)
        {
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @PrimaryTouchPhase.started -= instance.OnPrimaryTouchPhase;
            @PrimaryTouchPhase.performed -= instance.OnPrimaryTouchPhase;
            @PrimaryTouchPhase.canceled -= instance.OnPrimaryTouchPhase;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @SecondaryTouchPhase.started -= instance.OnSecondaryTouchPhase;
            @SecondaryTouchPhase.performed -= instance.OnSecondaryTouchPhase;
            @SecondaryTouchPhase.canceled -= instance.OnSecondaryTouchPhase;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TouchActions.UnregisterCallbacks(ITouchActions)" />.
        /// </summary>
        /// <seealso cref="TouchActions.UnregisterCallbacks(ITouchActions)" />
        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TouchActions.AddCallbacks(ITouchActions)" />
        /// <seealso cref="TouchActions.RemoveCallbacks(ITouchActions)" />
        /// <seealso cref="TouchActions.UnregisterCallbacks(ITouchActions)" />
        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TouchActions" /> instance referencing this action map.
    /// </summary>
    public TouchActions @Touch => new TouchActions(this);

    // XRHMD
    private readonly InputActionMap m_XRHMD;
    private List<IXRHMDActions> m_XRHMDActionsCallbackInterfaces = new List<IXRHMDActions>();
    private readonly InputAction m_XRHMD_DevicePosition;
    private readonly InputAction m_XRHMD_DeviceRotation;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRHMD".
    /// </summary>
    public struct XRHMDActions
    {
        private @SpatialPointerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRHMDActions(@SpatialPointerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRHMD/DevicePosition".
        /// </summary>
        public InputAction @DevicePosition => m_Wrapper.m_XRHMD_DevicePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRHMD/DeviceRotation".
        /// </summary>
        public InputAction @DeviceRotation => m_Wrapper.m_XRHMD_DeviceRotation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRHMD; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRHMDActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRHMDActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRHMDActions" />
        public void AddCallbacks(IXRHMDActions instance)
        {
            if (instance == null || m_Wrapper.m_XRHMDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRHMDActionsCallbackInterfaces.Add(instance);
            @DevicePosition.started += instance.OnDevicePosition;
            @DevicePosition.performed += instance.OnDevicePosition;
            @DevicePosition.canceled += instance.OnDevicePosition;
            @DeviceRotation.started += instance.OnDeviceRotation;
            @DeviceRotation.performed += instance.OnDeviceRotation;
            @DeviceRotation.canceled += instance.OnDeviceRotation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRHMDActions" />
        private void UnregisterCallbacks(IXRHMDActions instance)
        {
            @DevicePosition.started -= instance.OnDevicePosition;
            @DevicePosition.performed -= instance.OnDevicePosition;
            @DevicePosition.canceled -= instance.OnDevicePosition;
            @DeviceRotation.started -= instance.OnDeviceRotation;
            @DeviceRotation.performed -= instance.OnDeviceRotation;
            @DeviceRotation.canceled -= instance.OnDeviceRotation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRHMDActions.UnregisterCallbacks(IXRHMDActions)" />.
        /// </summary>
        /// <seealso cref="XRHMDActions.UnregisterCallbacks(IXRHMDActions)" />
        public void RemoveCallbacks(IXRHMDActions instance)
        {
            if (m_Wrapper.m_XRHMDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRHMDActions.AddCallbacks(IXRHMDActions)" />
        /// <seealso cref="XRHMDActions.RemoveCallbacks(IXRHMDActions)" />
        /// <seealso cref="XRHMDActions.UnregisterCallbacks(IXRHMDActions)" />
        public void SetCallbacks(IXRHMDActions instance)
        {
            foreach (var item in m_Wrapper.m_XRHMDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRHMDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRHMDActions" /> instance referencing this action map.
    /// </summary>
    public XRHMDActions @XRHMD => new XRHMDActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Touch" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TouchActions.AddCallbacks(ITouchActions)" />
    /// <seealso cref="TouchActions.RemoveCallbacks(ITouchActions)" />
    public interface ITouchActions
    {
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PrimaryTouchPhase" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryTouchPhase(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryTouchPhase" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryTouchPhase(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRHMD" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRHMDActions.AddCallbacks(IXRHMDActions)" />
    /// <seealso cref="XRHMDActions.RemoveCallbacks(IXRHMDActions)" />
    public interface IXRHMDActions
    {
        /// <summary>
        /// Method invoked when associated input action "DevicePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDevicePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DeviceRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDeviceRotation(InputAction.CallbackContext context);
    }
}
